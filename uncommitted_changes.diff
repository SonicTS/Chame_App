diff --git a/backend/app/chame_app/database_instance.py b/backend/app/chame_app/database_instance.py
index f6380ca..2bfc1b9 100644
--- a/backend/app/chame_app/database_instance.py
+++ b/backend/app/chame_app/database_instance.py
@@ -1,14 +1,15 @@
 import datetime
-from typing import List
+from typing import List, Optional
 from chame_app.database import engine, SessionLocal
 from models.ingredient import Ingredient
 from models.product_ingredient_table import ProductIngredient
 from models.product_table import Product
+from models.product_toastround_table import ProductToastround
 from models.sales_table import Sale
 from models.toast_round import ToastRound
 from models.user_table import User
 from models.transaction_table import Transaction
-from models.bank_table import Bank
+from models.bank_table import Bank, BankTransaction
 from chame_app.database import Base
 from sqlalchemy.orm import joinedload
 
@@ -24,7 +25,7 @@ class Database:
         session = self.SessionLocal()
         bank = session.query(Bank).filter_by(account_id=1).first()
         if not bank:
-            bank = Bank(total_balance=0.0, available_balance=0.0, ingredient_value=0.0, product_value=0.0)
+            bank = Bank(total_balance=0.0, available_balance=0.0, ingredient_value=0.0, restocking_cost=0.0, profit_balance=0.0)
             session.add(bank)
             session.commit()
             session.refresh(bank)
@@ -39,6 +40,7 @@ class Database:
 
     def change_password(self, user_id: int, new_password: str, session=None):
         close_session = False
+        user_name = "404"
         try:
             if session is None:
                 session = self.get_session()
@@ -46,6 +48,7 @@ class Database:
             user = session.query(User).filter(User.id == user_id).first()
             if not user:
                 raise ValueError(f"{USER_NOT_FOUND_MSG} (user_id={user_id})")
+            user_name = user.name
             user.password_hash = new_password
             if close_session:
                 session.commit()
@@ -56,20 +59,24 @@ class Database:
                 session.rollback()
                 if close_session:
                     session.close()
-            raise RuntimeError(f"change_password failed for user_id={user_id}: {e}") from e
+            raise RuntimeError(f"change_password failed for User={user_name}: {e}") from e
 
-    def add_ingredient(self, name: str, price_per_unit: float, stock_quantity: int, session=None):
+    def add_ingredient(self, name: str, price_per_package: float, stock_quantity: int, number_ingredients: int, session=None):
         close_session = False
         try:
             if session is None:
                 session = self.get_session()
                 close_session = True
             stock = int(stock_quantity)
-            price = float(price_per_unit)
-            ingredient = Ingredient(name=name, price_per_unit=price, stock_quantity=stock)
+            price = float(price_per_package)
+            number_ingredients = int(number_ingredients)
+            if number_ingredients <= 0:
+                raise ValueError("Number of ingredients must be greater than 0")
+            price_per_unit = price / number_ingredients
+            ingredient = Ingredient(name=name, price_per_package=price, number_of_units=number_ingredients, price_per_unit=price_per_unit, stock_quantity=stock)
             if stock > 0:
                 bank = self.get_bank(session)
-                bank.ingredient_value += price * stock
+                bank.ingredient_value += price_per_unit * stock
             session.add(ingredient)
             if close_session:
                 session.commit()
@@ -80,15 +87,17 @@ class Database:
                 session.rollback()
                 if close_session:
                     session.close()
-            raise RuntimeError(f"add_ingredient failed for name={name}: {e}") from e
+            raise RuntimeError(f"add_ingredient failed for ingredient={name}: {e}") from e
 
     def stock_ingredient(self, ingredient_id: int, quantity: int, session=None):
         close_session = False
+        ingredient_name = "404"
         try:
             if session is None:
                 session = self.get_session()
                 close_session = True
             ingredient = self.get_ingredient_by_id(ingredient_id, session)
+            ingredient_name = ingredient.name
             quantity = int(quantity)
             ingredient.stock_quantity += quantity
             bank = self.get_bank(session)
@@ -100,8 +109,6 @@ class Database:
                 new_stock = product.stock_quantity
                 if new_stock < current_stock:
                     raise RuntimeError(f"This should never happen: {product.name} stock decreased from {current_stock} to {new_stock}")
-                if new_stock > current_stock:
-                    bank.product_value += (new_stock - current_stock) * product.price_per_unit
             if close_session:
                 session.commit()
                 session.refresh(ingredient)
@@ -111,21 +118,34 @@ class Database:
                 session.rollback()
                 if close_session:
                     session.close()
-            raise RuntimeError(f"stock_ingredient failed for ingredient_id={ingredient_id}, quantity={quantity}: {e}") from e
+            raise RuntimeError(f"stock_ingredient failed for ingredient={ingredient_name}, quantity={quantity}: {e}") from e
 
-    def add_product(self, name: str, ingredients: List[tuple[Ingredient, int]], price_per_unit: float = 0.0, category: str = "raw", toast_round_quantity=None, session=None):
+    def add_product(self, name: str, ingredients: List[tuple[Ingredient, int]], price_per_unit: float = 0.0, category: str = "raw", toaster_space: Optional[int] = None, session=None):
         close_session = False
         try:
             if session is None:
                 session = self.get_session()
                 close_session = True
             if len(ingredients) == 0:
-                raise ValueError(f"add_product: Product must have at least one ingredient (name={name})")
+                raise ValueError("Product must have at least one ingredient")
             if len(ingredients) > 1 and category == "raw":
-                raise ValueError(f"add_product: Raw products can only have one ingredient (name={name})")
+                raise ValueError("Raw products can only have one ingredient")
             price = float(price_per_unit)
-            toast_round_quantity = int(toast_round_quantity) if toast_round_quantity not in (None, "") else 0
-            product = Product(name=name, price_per_unit=price, category=category, toast_round_quantity=toast_round_quantity)
+            if toaster_space:
+                toaster_space = int(toaster_space)
+                if toaster_space < 1:
+                    raise ValueError("Toaster space must be at least 1")
+            else:
+                toaster_space = 0
+            cost_per_unit = 0.0
+            for ingredient_obj, quantity in ingredients:
+                ingredient_quantity = int(quantity)
+                if ingredient_quantity <= 0:
+                    raise ValueError(f"Ingredient quantity must be greater than 0 (ingredient={ingredient_obj.name})")
+                cost_per_unit += ingredient_obj.price_per_unit * ingredient_quantity
+            profit_per_unit = price - cost_per_unit
+            product = Product(name=name, price_per_unit=price, category=category, 
+                              toaster_space=toaster_space, cost_per_unit=cost_per_unit, profit_per_unit=profit_per_unit)
             session.add(product)
             session.flush()
             for ingredient_obj, quantity in ingredients:
@@ -134,8 +154,6 @@ class Database:
                 association = ProductIngredient(product=product, ingredient=existing_ingredient, ingredient_quantity=ingredient_quantity)
                 session.add(association)
             product.update_stock()
-            bank = self.get_bank(session)
-            bank.product_value += product.price_per_unit * product.stock_quantity
             if close_session:
                 session.commit()
                 session.refresh(product)
@@ -145,7 +163,7 @@ class Database:
                 session.rollback()
                 if close_session:
                     session.close()
-            raise RuntimeError(f"add_product failed for name={name}: {e}") from e
+            raise RuntimeError(f"add_product failed for Product={name}: {e}") from e
 
     def add_user(self, username: str, password: str, role: str = "user", balance: float = 0.0, session=None):
         close_session = False
@@ -154,14 +172,20 @@ class Database:
                 session = self.get_session()
                 close_session = True
             if username == "bank":
-                raise ValueError("add_user: Username 'bank' is reserved and cannot be used")
+                raise ValueError("Username 'bank' is reserved and cannot be used")
             balance = float(balance)
             user = User(name=username, balance=balance, password_hash=password, role=role)
             bank = self.get_bank(session)
             bank.total_balance += balance
             session.add(user)
+            session.flush()
+            if balance > 0:
+                transaction = Transaction(user_id=user.user_id, amount=balance, type="deposit", timestamp=datetime.datetime.now())
+                session.add(transaction)
             if close_session:
                 session.commit()
+                if balance > 0:
+                    session.refresh(transaction)
                 session.refresh(user)
                 session.close()
         except Exception as e:
@@ -173,14 +197,14 @@ class Database:
 
     def _check_product_stock(self, product, quantity):
         if product.stock_quantity < quantity:
-            raise ValueError(f"make_purchase: Insufficient stock for this product (product_id={product.product_id}, quantity={quantity})")
+            raise ValueError("Insufficient stock for this product)")
 
     def _check_and_update_ingredient_stock(self, product, quantity, bank):
         for assoc in product.product_ingredients:
             ingredient = assoc.ingredient
             required_qty = assoc.ingredient_quantity * quantity
             if ingredient.stock_quantity < required_qty:
-                raise ValueError(f"make_purchase: Insufficient stock for ingredient {ingredient.name} (ingredient_id={ingredient.ingredient_id}, required_qty={required_qty})")
+                raise ValueError(f"Insufficient stock for ingredient {ingredient.name}, required_qty={required_qty})")
         # If all checks pass, update stock
         for assoc in product.product_ingredients:
             ingredient = assoc.ingredient
@@ -192,26 +216,31 @@ class Database:
 
     def make_purchase(self, user_id: int, product_id: int, quantity: int, session=None, toast_round_id: int = 0) -> Sale:
         close_session = False
+        product_name = "404"
+        user_name = "404"
         try:
             if session is None:
                 session = self.get_session()
                 close_session = True
             quantity = int(quantity)
+            product = self.get_product_by_id(product_id, session)
+            product_name = product.name
             if quantity <= 0:
-                raise ValueError(f"make_purchase: Quantity must be greater than 0 (product_id={product_id}, quantity={quantity})")
+                raise ValueError("make_purchase: Quantity must be greater than 0")
             bank = self.get_bank(session)
-            product = self.get_product_by_id(product_id, session)
             self._check_product_stock(product, quantity)
             self._check_and_update_ingredient_stock(product, quantity, bank)
             product.update_stock()
             total_cost = product.price_per_unit * quantity
             user = self.get_user_by_id(user_id, session=session)
+            user_name = user.name
             if user.balance < total_cost:
-                raise ValueError("Insufficient balance")
+                raise ValueError(f"Insufficient balance: {user.balance}")
             purchase = Sale(user_id=user_id, product_id=product_id, quantity=quantity, total_price=total_cost, timestamp=datetime.datetime.now(), toast_round_id=toast_round_id)
             user.balance -= total_cost
             bank.available_balance += total_cost
-            bank.product_value -= total_cost
+            bank.restocking_cost += total_cost - product.profit_per_unit * quantity
+            bank.profit_balance += product.profit_per_unit * quantity
             session.add(purchase)
             if close_session:
                 session.commit()
@@ -223,19 +252,22 @@ class Database:
                 session.rollback()
                 if close_session:
                     session.close()
-            raise RuntimeError(f"make_purchase failed for user_id={user_id}, product_id={product_id}, quantity={quantity}: {e}") from e
+            raise RuntimeError(f"make_purchase failed for User={user_name}, Product={product_name}, quantity={quantity}: {e}") from e
 
     def deposit_cash(self, user_id: int, amount: float, session=None):
         close_session = False
+        user_name = "404"
         try:
             if session is None:
                 session = self.get_session()
                 close_session = True
             bank = self.get_bank(session)
             user = self.get_user_by_id(user_id, session)
+            user_name = user.name
+            amount = float(amount)
             user.balance += amount
             bank.total_balance += amount
-            transaction = Transaction(user_id=user_id, amount=amount, transaction_type="deposit", timestamp=datetime.now())
+            transaction = Transaction(user_id=user_id, amount=amount, type="deposit", timestamp=datetime.datetime.now())
             session.add(transaction)
             if close_session:
                 session.commit()
@@ -246,20 +278,27 @@ class Database:
                 session.rollback()
                 if close_session:
                     session.close()
-            raise RuntimeError(f"deposit_cash failed for user_id={user_id}, amount={amount}: {e}") from e
+            raise RuntimeError(f"deposit_cash failed for User={user_name}, amount={amount}: {e}") from e
 
     def withdraw_cash(self, user_id: int, amount: float, session=None):
         close_session = False
+        user_name = "404"
         try:
             if session is None:
                 session = self.get_session()
                 close_session = True
             bank = self.get_bank(session)
             user = self.get_user_by_id(user_id, session)
+            user_name = user.name
+            amount = float(amount)
+            if amount <= 0:
+                raise ValueError("Amount must be greater than 0 ")
             if user.balance < amount:
-                raise ValueError(f"withdraw_cash: Insufficient balance (user_id={user_id}, amount={amount})")
+                raise ValueError(f"Insufficient balance {user.balance}")
             user.balance -= amount
             bank.total_balance -= amount
+            transaction = Transaction(user_id=user_id, amount=amount, type="withdraw", timestamp=datetime.datetime.now())
+            session.add(transaction)
             if close_session:
                 session.commit()
                 session.refresh(user)
@@ -269,25 +308,63 @@ class Database:
                 session.rollback()
                 if close_session:
                     session.close()
-            raise RuntimeError(f"withdraw_cash failed for user_id={user_id}, amount={amount}: {e}") from e
+            raise RuntimeError(f"withdraw_cash failed for User={user_name}, amount={amount}: {e}") from e
 
-    def add_toast_round(self, product_id: int, user_selection: List[int], session=None):
+    def withdraw_cash_from_bank(self, amount: float, description: str = "Withdrawal from bank", session=None):
         close_session = False
         try:
             if session is None:
                 session = self.get_session()
                 close_session = True
-            product = self.get_product_by_id(product_id, session)
-            if product.category != "toast":
-                raise ValueError(f"add_toast_round: Product is not a toast product (product_id={product_id})")
-            if product.stock_quantity < len(user_selection):
-                raise ValueError(f"add_toast_round: Insufficient stock for this product (product_id={product_id}, needed={len(user_selection)})")
-            toast_round = ToastRound(product_id=product.product_id)
+            bank = self.get_bank(session)
+            amount = float(amount)
+            if amount <= 0:
+                raise ValueError("Amount must be greater than 0 ")
+            if bank.available_balance < amount:
+                raise ValueError(f"Insufficient balance {bank.available_balance}")
+            bank.total_balance -= amount
+            bank.available_balance -= amount
+            if bank.restocking_cost < amount:
+                bank.profit_balance -= (amount - bank.restocking_cost)
+                bank.restocking_cost = 0
+            else:
+                bank.restocking_cost -= amount
+            transaction = BankTransaction(amount=amount, type="withdraw", description=description)
+            session.add(transaction)
+            if close_session:
+                session.commit()
+                session.refresh(bank)
+                session.close()
+        except Exception as e:
+            if session:
+                session.rollback()
+                if close_session:
+                    session.close()
+            raise RuntimeError(f"withdraw_cash_from_bank failed for amount={amount}: {e}") from e
+   
+    def add_toast_round(self, product_user_list: List[tuple[int, int]], session=None):
+        close_session = False
+        name_list = ["404"]
+        try:
+            if session is None:
+                session = self.get_session()
+                close_session = True
+
+            toast_round = ToastRound()
             session.add(toast_round)
-            for user_id in user_selection:
+            session.flush()
+            unique_products = set()
+            name_list = []
+            for product_id, user_id in product_user_list:
+                unique_products.add(product_id)
+                product = self.get_product_by_id(product_id, session)
                 user = self.get_user_by_id(user_id, session)
-                sale = self.make_purchase(user.user_id, product.product_id, 1, session=session)
+                sale = self.make_purchase(user.user_id, product.product_id, 1, session=session, toast_round_id=toast_round.toast_round_id)
                 toast_round.sales.append(sale)
+                name_list.append(f"{user.name} bought {product.name}")
+            for product_id in unique_products:
+                product_toast_round = ProductToastround(product_id=product_id, toast_round_id=toast_round.toast_round_id)
+                session.add(product_toast_round)
             if close_session:
                 session.commit()
                 session.close()
@@ -296,19 +373,21 @@ class Database:
                 session.rollback()
                 if close_session:
                     session.close()
-            raise RuntimeError(f"add_toast_round failed for product_id={product_id}, user_selection={user_selection}: {e}") from e
+            raise RuntimeError(f"add_toast_round failed for round={name_list}: {e}") from e
 
     def get_user_balance(self, user_id: int, session=None) -> float:
         """Get the balance of a user."""
         close_session = False
+        user_name = "404"
         if session is None:
             session = self.get_session()
             close_session = True
         try:
             user = self.get_user_by_id(user_id, session)
+            user_name = user.name
             return user.balance
         except Exception as e:
-            raise RuntimeError(f"get_user_balance failed for user_id={user_id}: {e}") from e
+            raise RuntimeError(f"get_user_balance failed for User={user_name}: {e}") from e
         finally:
             if close_session:
                 session.close()
@@ -331,13 +410,13 @@ class Database:
                 session.close()
 
     def get_all_users(self, session=None) -> List[User]:
-        """Get all users with eager loading."""
+        """Get all users."""
         close_session = False
         if session is None:
             session = self.get_session()
             close_session = True
         try:
-            users = session.query(User).options(joinedload('*')).all()
+            users = session.query(User).all()
             return users
         except Exception as e:
             raise RuntimeError(f"get_all_users failed: {e}") from e
@@ -346,13 +425,15 @@ class Database:
                 session.close()
 
     def get_all_products(self, session=None) -> List[Product]:
-        """Get all products with eager loading."""
+        """Get all products with ingredients eager loaded."""
         close_session = False
         if session is None:
             session = self.get_session()
             close_session = True
         try:
-            products = session.query(Product).options(joinedload('*')).all()
+            products = session.query(Product).options(
+                joinedload(Product.product_ingredients).joinedload(ProductIngredient.ingredient)
+            ).all()
             return products
         except Exception as e:
             raise RuntimeError(f"get_all_products failed: {e}") from e
@@ -361,7 +442,7 @@ class Database:
                 session.close()
 
     def get_all_ingredients(self, eager_load=False, session=None) -> List[Ingredient]:
-        """Get all ingredients, with optional eager loading."""
+        """Get all ingredients, with optional eager loading of products."""
         close_session = False
         if session is None:
             session = self.get_session()
@@ -369,7 +450,7 @@ class Database:
         try:
             query = session.query(Ingredient)
             if eager_load:
-                query = query.options(joinedload('*'))
+                query = query.options(joinedload(Ingredient.ingredient_products).joinedload(ProductIngredient.product))
             ingredients = query.all()
             return ingredients
         except Exception as e:
@@ -447,14 +528,14 @@ class Database:
                 session.close()
 
     def get_all_products_by_category(self, category: str, session=None) -> List[Product]:
-        """Get all products by category."""
+        """Get all products by category, with ingredients eager loaded."""
         close_session = False
         if session is None:
             session = self.get_session()
             close_session = True
         try:
             products = session.query(Product).options(
-                joinedload('*')
+                joinedload(Product.product_ingredients).joinedload(ProductIngredient.ingredient)
             ).filter(Product.category == category).all()
             return products
         except Exception as e:
@@ -479,14 +560,15 @@ class Database:
                 session.close()
 
     def get_all_toast_rounds(self, session=None) -> List[ToastRound]:
-        """Get all toast rounds."""
+        """Get all toast rounds with sales, user, and product eager loaded."""
         close_session = False
         if session is None:
             session = self.get_session()
             close_session = True
         try:
             toast_rounds = session.query(ToastRound).options(
-                joinedload('*')
+                joinedload(ToastRound.sales).joinedload(Sale.user),
+                joinedload(ToastRound.sales).joinedload(Sale.product)
             ).all()
             return toast_rounds
         except Exception as e:
@@ -521,7 +603,8 @@ class Database:
             close_session = True
         try:
             sales = session.query(Sale).options(
-                joinedload('*')
+                joinedload(Sale.user),
+                joinedload(Sale.product)
             ).join(Product).filter(Product.category == category).all()
             return sales
         except Exception as e:
@@ -530,5 +613,43 @@ class Database:
             if close_session:
                 session.close()
 
+    def get_filtered_transaction(self, user_id: int, tx_type: str, session=None) -> List[Transaction]:
+        """Get filtered transactions."""
+        close_session = False
+        if session is None:
+            session = self.get_session()
+            close_session = True
+        try:
+            query = session.query(Transaction).options(
+                joinedload(Transaction.user),
+            )
+            if user_id != "all":
+                user_id = int(user_id)
+                query = query.filter(Transaction.user_id == user_id)
+            if tx_type != "all":
+                query = query.filter(Transaction.type == tx_type)
+            transactions = query.all()
+            return transactions
+        except Exception as e:
+            raise RuntimeError(f"get_filtered_transaction failed: {e}") from e
+        finally:
+            if close_session:
+                session.close()
+
+    def get_bank_transaction(self, session=None) -> List[BankTransaction]:
+        """Get filtered transactions."""
+        close_session = False
+        if session is None:
+            session = self.get_session()
+            close_session = True
+        try:
+            transactions = session.query(BankTransaction).all()
+            return transactions
+        except Exception as e:
+            raise RuntimeError(f"get_bank_transaction failed: {e}") from e
+        finally:
+            if close_session:
+                session.close()
+
 
 database = Database()
\ No newline at end of file
diff --git a/backend/app/models/bank_table.py b/backend/app/models/bank_table.py
index c3fc3d6..9c1a1cf 100644
--- a/backend/app/models/bank_table.py
+++ b/backend/app/models/bank_table.py
@@ -1,5 +1,6 @@
-from sqlalchemy import Column, Integer, Float
+from sqlalchemy import Column, Integer, Float, String, DateTime
 from chame_app.database import Base
+import datetime
 
 class Bank(Base):
     __tablename__ = "bank"
@@ -8,10 +9,23 @@ class Bank(Base):
     account_id = Column(Integer, primary_key=True, default=1)  # Single row enforced with default 1
     total_balance = Column(Float, default=0.0)
     available_balance = Column(Float, default=0.0)
+    restocking_cost = Column(Float, default=0.0)
+    profit_balance = Column(Float, default=0.0)
     ingredient_value = Column(Float, default=0.0)
-    product_value = Column(Float, default=0.0)
 
     def __repr__(self):
         return f"<Bank(user_id={self.user_id}, total_balance={self.total_balance}, " \
                f"available_balance={self.available_balance}, ingredient_value={self.ingredient_value}, " \
                f"product_value={self.product_value})>"
+
+class BankTransaction(Base):
+    __tablename__ = "bank_transactions"
+
+    transaction_id = Column(Integer, primary_key=True, autoincrement=True)
+    amount = Column(Float, nullable=False)
+    type = Column(String, nullable=False)  # e.g., 'withdrawal'
+    timestamp = Column(DateTime, default=datetime.datetime.utcnow)
+    description = Column(String, nullable=True)  # Optional description field
+
+    def __repr__(self):
+        return f"<BankTransaction(id={self.transaction_id}, amount={self.amount}, type={self.type}, timestamp={self.timestamp}, description={self.description})>"
diff --git a/backend/app/models/ingredient.py b/backend/app/models/ingredient.py
index dadbf53..675f657 100644
--- a/backend/app/models/ingredient.py
+++ b/backend/app/models/ingredient.py
@@ -8,13 +8,17 @@ class Ingredient(Base):
 
     ingredient_id = Column(Integer, primary_key=True, index=True)
     name = Column(String, index=True)
+    price_per_package = Column(Float)  # Purchasing price per package
+    number_of_units = Column(Integer)  # Number of units in a package
     price_per_unit = Column(Float)  # Purchasing price per unit
     stock_quantity = Column(Integer, default=0)
 
     # Relationship back to Product (via the ProductIngredient table)
     ingredient_products = relationship("ProductIngredient", back_populates="ingredient")
-    def __init__(self, name: str, price_per_unit: float, stock_quantity: int = 0):
+    def __init__(self, name, price_per_package=None, number_of_units=None, price_per_unit=None, stock_quantity=0):
         self.name = name
+        self.price_per_package = price_per_package
+        self.number_of_units = number_of_units
         self.price_per_unit = price_per_unit
         self.stock_quantity = stock_quantity
         
diff --git a/backend/app/models/product_table.py b/backend/app/models/product_table.py
index e7a2dea..8fdaa4b 100644
--- a/backend/app/models/product_table.py
+++ b/backend/app/models/product_table.py
@@ -12,10 +12,13 @@ class Product(Base):
     name = Column(String, index=True)
     category = Column(String)  # 'raw ingredient' or 'toast'
     price_per_unit = Column(Float)
+    cost_per_unit = Column(Float)  # Cost price per unit	
+    profit_per_unit = Column(Float)  # Profit per unit
     stock_quantity = Column(Integer, default=0)
-    toast_round_quantity = Column(Integer, default=0)  # For toast products
+    toaster_space = Column(Integer, default=0)  # For toast products
     sales = relationship("Sale", back_populates="product")
 
+    product_toast_rounds = relationship("ProductToastround", back_populates="product")
     product_ingredients = relationship("ProductIngredient", back_populates="product", cascade="all, delete-orphan")
 
     def update_stock(self):
@@ -44,11 +47,14 @@ class Product(Base):
 
         print(f"Stock updated for product: {self.name} -> {self.stock_quantity}")
 
-        def __init__(self, name: str, category: str, ingredients: List[Ingredient],price_per_unit: float = 0, stock_quantity: int = 0) -> None:
+        def __init__(self, name: str, category: str, price_per_unit: float = 0, cost_per_unit: float = 0, profit_per_unit: float = 0, stock_quantity: int = 0, toaster_space: int = 0):
             self.name = name
             self.category = category
             self.price_per_unit = price_per_unit
-            self.stock_quantity = 0
+            self.cost_per_unit = cost_per_unit
+            self.profit_per_unit = profit_per_unit
+            self.stock_quantity = stock_quantity
+            self.toaster_space = toaster_space
 
     def __repr__(self):
         return f"<Product(name={self.name}, category={self.category}, price={self.price_per_unit}, stock={self.stock_quantity}, ingredients={self.ingredients})>"
diff --git a/backend/app/models/toast_round.py b/backend/app/models/toast_round.py
index 50dfdbc..b50e9d6 100644
--- a/backend/app/models/toast_round.py
+++ b/backend/app/models/toast_round.py
@@ -9,11 +9,10 @@ class ToastRound(Base):
     __tablename__ = 'toast_round'
 
     toast_round_id = Column(Integer, primary_key=True, autoincrement=True)
-    product_id = Column(Integer, ForeignKey('products.product_id'), nullable=False)
     date_time = Column(String)  # This can be a datetime field, but we'll keep it simple for now
     # Relationship to link multiple sales to a single toast round
+    toast_round_products = relationship('ProductToastround', back_populates='toast_round')
     sales = relationship('Sale', back_populates='toast_round')
 
-    def __init__(self, product_id, date_time: str = str(datetime.datetime.now())):
-        self.date_time = date_time
-        self.product_id = product_id
\ No newline at end of file
+    def __init__(self, date_time: str = str(datetime.datetime.now())):
+        self.date_time = date_time
\ No newline at end of file
diff --git a/backend/app/models/transaction_table.py b/backend/app/models/transaction_table.py
index bed9cae..6e11a4b 100644
--- a/backend/app/models/transaction_table.py
+++ b/backend/app/models/transaction_table.py
@@ -1,4 +1,5 @@
 from sqlalchemy import Column, Integer, Float, String, ForeignKey
+from sqlalchemy.orm import relationship
 from chame_app.database import Base
 
 class Transaction(Base):
@@ -7,8 +8,9 @@ class Transaction(Base):
     transaction_id = Column(Integer, primary_key=True, index=True)
     user_id = Column(Integer, ForeignKey("users.user_id"))
     amount = Column(Float)
-    type = Column(String)  # 'deposit', 'withdrawal'
+    type = Column(String)  # 'deposit', 'withdraw'
     timestamp = Column(String)  # For simplicity, this can be a string (you can use datetime for a more complex setup)
+    user = relationship("User", backref="transactions")
     def __init__(self, user_id: int, amount: float, type: str, timestamp: str):
         self.user_id = user_id
         self.amount = amount
diff --git a/backend/app/services/admin_webpage.py b/backend/app/services/admin_webpage.py
index 09eb875..2854895 100644
--- a/backend/app/services/admin_webpage.py
+++ b/backend/app/services/admin_webpage.py
@@ -79,12 +79,12 @@ def add_product():
             category = request.form['category']
             price = request.form['price']
             ingredients_ids = request.form.getlist('ingredients[]')
-            toast_round_quantity = request.form.get('toast_round_quantity')
+            toaster_space = request.form.get('toaster_space')
             ingredients = database.get_ingredients_by_ids(ingredients_ids)
             quantities = request.form.getlist('quantities[]')
             ingredient_quantity_pairs = list(zip(ingredients, quantities))
             try:
-                database.add_product(name=name, ingredients=ingredient_quantity_pairs, price_per_unit=price, category=category, toast_round_quantity=toast_round_quantity)
+                database.add_product(name=name, ingredients=ingredient_quantity_pairs, price_per_unit=price, category=category, toaster_space=toaster_space)
                 return redirect(url_for('products'))
             except Exception as e:
                 logging.error(f"Error adding product: {e}", exc_info=e)
@@ -114,12 +114,100 @@ def add_user():
         logging.error(f"Error in add_user: {e}", exc_info=e)
         users = database.get_all_users()
         return render_template(USERS_TEMPLATE, users=users, error_message=str(e))
+    
+@app.route('/users/withdraw', methods=['POST'])
+def withdraw():
+    user_id = request.form['user_id']
+    amount = request.form['amount']
+
+    if not user_id or not amount:
+        users = database.get_all_users()
+        logging.error("Invalid input in withdraw")
+        return render_template(USERS_TEMPLATE, users=users, error_message="Invalid input")
+
+    try:
+        database.withdraw_cash(user_id=user_id, amount=amount)
+        return redirect(url_for('users'))
+    except Exception as e:
+        logging.error(f"Error in withdraw: {e}", exc_info=e)
+        users = database.get_all_users()
+        transactions = database.get_filtered_transaction(user_id="all", tx_type="all")  # Replace with actual query result
+        tx_list = []
+        for tx in transactions:
+            tx_list.append({
+                "date": tx.timestamp,  # or tx.date if that's your field
+                "user_name": tx.user.name if tx.user else "",  # assumes you set up the relationship
+                "type": tx.type,
+                "amount": tx.amount
+            })
+        return render_template(USERS_TEMPLATE, users=users, transactions=tx_list, error_message=str(e))
+    
+
+    
+@app.route('/users/deposit', methods=['POST'])
+def deposit():
+    user_id = request.form['user_id']
+    amount = request.form['amount']
+
+    if not user_id or not amount:
+        users = database.get_all_users()
+        logging.error("Invalid input in withdraw")
+        return render_template(USERS_TEMPLATE, users=users, error_message="Invalid input")
+
+    try:
+        database.deposit_cash(user_id=user_id, amount=amount)
+        return redirect(url_for('users'))
+    except Exception as e:
+        logging.error(f"Error in withdraw: {e}", exc_info=e)
+        users = database.get_all_users()
+        transactions = database.get_filtered_transaction(user_id="all", tx_type="all")  # Replace with actual query result
+        tx_list = []
+        for tx in transactions:
+            tx_list.append({
+                "date": tx.timestamp,  # or tx.date if that's your field
+                "user_name": tx.user.name if tx.user else "",  # assumes you set up the relationship
+                "type": tx.type,
+                "amount": tx.amount
+            })
+        return render_template(USERS_TEMPLATE, users=users, transactions=tx_list, error_message=str(e))
+    
+@app.route('/users/transactions')
+def users_transactions():
+    user_id = request.args.get('user_id', 'all')
+    tx_type = request.args.get('type', 'all')
+    # TODO: Query the database for transactions filtered by user_id and tx_type
+    # Example: transactions = database.get_transactions(user_id=user_id, tx_type=tx_type)
+    # The result should be a list of dicts with keys: date, user_name, type, amount
+    transactions = database.get_filtered_transaction(user_id=user_id, tx_type=tx_type)  # Replace with actual query result
+    tx_list = []
+    for tx in transactions:
+        tx_list.append({
+            "date": tx.timestamp,  # or tx.date if that's your field
+            "user_name": tx.user.name if tx.user else "",  # assumes you set up the relationship
+            "type": tx.type,
+            "amount": tx.amount
+        })
+
+    return app.response_class(
+        response=pyjson.dumps(tx_list),
+        status=200,
+        mimetype='application/json'
+    )
 
 @app.route('/users')
 def users():
     try:
         users = database.get_all_users()
-        return render_template(USERS_TEMPLATE, users=users)
+        transactions = database.get_filtered_transaction(user_id="all", tx_type="all")  # Replace with actual query result
+        tx_list = []
+        for tx in transactions:
+            tx_list.append({
+                "date": tx.timestamp,  # or tx.date if that's your field
+                "user_name": tx.user.name if tx.user else "",  # assumes you set up the relationship
+                "type": tx.type,
+                "amount": tx.amount
+            })
+        return render_template(USERS_TEMPLATE, users=users, transactions=tx_list)
     except Exception as e:
         logging.error(f"Error in users: {e}", exc_info=e)
         return render_template(USERS_TEMPLATE, users=[], error_message=str(e))
@@ -140,8 +228,9 @@ def add_ingredient():
             name = request.form['name']
             price_str = request.form['price']
             stock_str = request.form['stock']
+            number_ingredients = request.form['number_ingredients']
             try:
-                database.add_ingredient(name=name, price_per_unit=price_str, stock_quantity=stock_str)
+                database.add_ingredient(name=name, price_per_package=price_str, stock_quantity=stock_str, number_ingredients=number_ingredients)
                 return redirect(url_for('ingredients'))
             except Exception as e:
                 logging.error(f"Error adding ingredient: {e}", exc_info=e)
@@ -182,26 +271,31 @@ def toast_round():
     try:
         if request.method == 'POST':
             try:
-                product_id = request.form.get('product_id')
+                product_ids = request.form.getlist('product_ids[]')
                 user_selections = request.form.getlist('user_selections[]')
-                for user_id in user_selections:
-                    print(f"User {user_id} selected for product {product_id}")
-                database.add_toast_round(product_id=product_id, user_selection=user_selections)
+                if not product_ids or not user_selections:
+                    raise ValueError("Product IDs and user selections cannot be empty.")
+                if len(product_ids) != len(user_selections):
+                    raise ValueError("Mismatch between product IDs and user selections.")
+                product_user_pairs = list(zip(product_ids, user_selections))
+                database.add_toast_round(product_user_list=product_user_pairs)
             except Exception as e:
                 logging.error(f"Error in toast_round POST: {e}", exc_info=e)
                 toasts = database.get_all_toast_products()
                 users = database.get_all_users()
-                users_json = json.dumps([{"user_id": user.user_id, "name": user.name} for user in users])
+                users_json = pyjson.dumps([{"user_id": user.user_id, "name": user.name} for user in users])
+                toasts_json = pyjson.dumps([{"product_id": t.product_id, "name": t.name, "toaster_space": getattr(t, 'toaster_space', 1)} for t in toasts])
                 toast_rounds = database.get_all_toast_rounds()
-                return render_template(TOAST_ROUND_TEMPLATE, toast_products=toasts, users=users, users_json=users_json, toast_rounds=toast_rounds, error_message=str(e))
+                return render_template(TOAST_ROUND_TEMPLATE, toast_rounds=toast_rounds, users_json=users_json, products_json=toasts_json, error_message=str(e))
         toasts = database.get_all_toast_products()
         users = database.get_all_users()
-        users_json = json.dumps([{"user_id": user.user_id, "name": user.name} for user in users])
+        users_json = pyjson.dumps([{"user_id": user.user_id, "name": user.name} for user in users])
+        toasts_json = pyjson.dumps([{"product_id": t.product_id, "name": t.name, "toaster_space": getattr(t, 'toaster_space', 1)} for t in toasts])
         toast_rounds = database.get_all_toast_rounds()
-        return render_template(TOAST_ROUND_TEMPLATE, toast_products=toasts, users=users, users_json=users_json, toast_rounds=toast_rounds)
+        return render_template(TOAST_ROUND_TEMPLATE, toast_rounds=toast_rounds, users_json=users_json, products_json=toasts_json)
     except Exception as e:
         logging.error(f"Error in toast_round: {e}", exc_info=e)
-        return render_template(TOAST_ROUND_TEMPLATE, toast_products=[], users=[], users_json='[]', toast_rounds=[], error_message=str(e))
+        return render_template(TOAST_ROUND_TEMPLATE, toast_rounds=[], users_json='[]', products_json='[]', error_message=str(e))
 
 @app.route('/ingredients/restock', methods=['POST'])
 def restock_ingredient():
@@ -214,16 +308,61 @@ def restock_ingredient():
     except Exception as e:
         logging.error(f"Error in restock_ingredient: {e}", exc_info=e)
         ingredients = database.get_all_ingredients(eager_load=True)
-        return render_template(INGREDIENTS_TEMPLATE, ingredients=ingredients, error_message=str(e))
+        return render_template(INGREDIENTS_TEMPLATE, ingredients=ingredients, transactions=None, error_message=str(e))
 
 @app.route('/bank', methods=['GET'])
 def bank():
     try:
+        transactions = database.get_bank_transaction()  # Replace with actual query result
+        tx_list = []
+        for tx in transactions:
+            tx_list.append({
+                "date": tx.timestamp,  # or tx.date if that's your field
+                "type": tx.type,
+                "amount": tx.amount,
+                "description": tx.description
+            })
         bank = database.get_bank()
-        return render_template(BANK_TEMPLATE, bank_entry=bank)
+        return render_template(BANK_TEMPLATE, bank_entry=bank, transactions=tx_list)
     except Exception as e:
         logging.error(f"Error in bank: {e}", exc_info=e)
-        return render_template(BANK_TEMPLATE, bank_entry=None, error_message=str(e))
+        return render_template(BANK_TEMPLATE, bank_entry=None, transactions=None, error_message=str(e))
+    
+@app.route('/bank/withdraw', methods=['POST'])
+def bank_withdraw():
+    amount = request.form['amount']
+    description = request.form['description']
+    if not amount:
+        bank = database.get_bank()
+        logging.error("Invalid input in bank withdraw")
+        transactions = database.get_bank_transaction()  # Replace with actual query result
+        tx_list = []
+        for tx in transactions:
+            tx_list.append({
+                "date": tx.timestamp,  # or tx.date if that's your field
+                "type": tx.type,
+                "amount": tx.amount,
+                "description": tx.description
+            })
+        return render_template(BANK_TEMPLATE, bank_entry=bank, transactions=tx_list, error_message="Invalid input")
+    try:
+        database.withdraw_cash_from_bank(amount=amount, description=description)
+        return redirect(url_for('bank'))
+    except Exception as e:
+        logging.error(f"Error in bank withdraw: {e}", exc_info=e)
+        bank = database.get_bank()
+        transactions = database.get_bank_transaction()  # Replace with actual query result
+        tx_list = []
+        for tx in transactions:
+            tx_list.append({
+                "date": tx.timestamp,  # or tx.date if that's your field
+                "type": tx.type,
+                "amount": tx.amount,
+                "description": tx.description
+            })
+        return render_template(BANK_TEMPLATE, bank_entry=bank, transactions=tx_list, error_message=str(e))
+
+
 
 # Run the Flask application
 if __name__ == '__main__':
diff --git a/frontend/admin_webpage/static/js/add_product.js b/frontend/admin_webpage/static/js/add_product.js
index 2cb2101..077e8ba 100644
--- a/frontend/admin_webpage/static/js/add_product.js
+++ b/frontend/admin_webpage/static/js/add_product.js
@@ -1,91 +1,95 @@
-function addIngredient() {
-    const ingredientSelect = document.getElementById("ingredientSelect");
-    const quantityInput = document.getElementById("ingredientQuantity");
-    const selectedIngredient = ingredientSelect.options[ingredientSelect.selectedIndex];
-    const quantity = quantityInput.value;
+// Import popup functions for use in this file
+import { showErrorPopup, showSuccessPopup } from './pop_up.js';
 
-    console.debug("Selected ingredient:", selectedIngredient.text, "Value:", selectedIngredient.value);
-    console.debug("Entered quantity:", quantity);
-
-    if (!quantity || quantity <= 0) {
-        alert("Please enter a valid quantity.");
-        console.warn("Invalid quantity entered:", quantity);
-        return;
-    }
-
-    const ingredientList = document.getElementById("ingredientList");
-    const row = document.createElement("tr");
-    row.innerHTML = `
-        <td>${selectedIngredient.text}</td>
-        <td>${quantity}</td>
-        <td><button type="button" onclick="removeIngredient(this)">Remove</button></td>
-        <input type="hidden" name="ingredients[]" value="${selectedIngredient.value}">
-        <input type="hidden" name="quantities[]" value="${quantity}">
-    `;
-    ingredientList.appendChild(row);
-
-    console.info("Added ingredient:", selectedIngredient.text, "with quantity:", quantity);
-
-    // Reset the input fields
-    ingredientSelect.selectedIndex = 0;
-    quantityInput.value = "";
-    console.debug("Reset ingredient select and quantity input fields.");
+function getQueryParam(name) {
+    const url = new URL(window.location.href);
+    return url.searchParams.get(name) || '';
 }
 
-function removeIngredient(button) {
-    const row = button.parentElement.parentElement;
-    row.remove();
+function removeQueryParam(name) {
+    const url = new URL(window.location.href);
+    url.searchParams.delete(name);
+    window.history.replaceState({}, document.title, url.pathname + url.search);
 }
 
-function toggleAdditionalInput() {
-    const categorySelect = document.getElementById("categorySelect");
-    const additionalInput = document.getElementById("toastRoundQuantitySelect");
+$(document).ready(function() {
+    // --- POPUP LOGIC ---
+    window.toggleAdditionalInput = toggleAdditionalInput;
+    if (window._errorMsg) showErrorPopup(window._errorMsg);
+    if (window._successMsg) showSuccessPopup(window._successMsg);
+    const urlSuccess = getQueryParam('success');
+    if (urlSuccess) {
+        showSuccessPopup(urlSuccess);
+        removeQueryParam('success');
+    }
 
-    if (categorySelect.value === "toast") {
-        additionalInput.style.display = "block"; // Show the additional input
-    } else {
-        additionalInput.style.display = "none"; // Hide the additional input
+    // --- CATEGORY TOGGLE LOGIC ---
+    function toggleAdditionalInput() {
+        const category = $('#categorySelect').val();
+        if (category === 'toast') {
+            $('#toasterSpaceQuantitySelect').show();
+        } else {
+            $('#toasterSpaceQuantitySelect').hide();
+        }
     }
-}
+    $('#categorySelect').on('change', toggleAdditionalInput);
+    toggleAdditionalInput(); // Initial call
 
-// Global AJAX error handler for popups
-function showErrorPopup(message) {
-    let popup = document.createElement('div');
-    popup.id = 'ajax-error-popup';
-    popup.style.position = 'fixed';
-    popup.style.top = '20px';
-    popup.style.left = '50%';
-    popup.style.transform = 'translateX(-50%)';
-    popup.style.background = '#f44336';
-    popup.style.color = 'white';
-    popup.style.padding = '16px';
-    popup.style.borderRadius = '8px';
-    popup.style.zIndex = '10000';
-    popup.style.minWidth = '200px';
-    popup.style.textAlign = 'center';
-    popup.style.boxShadow = '0 2px 8px rgba(0,0,0,0.2)';
-    popup.innerHTML = message + '<button onclick="this.parentElement.style.display=\'none\'" style="margin-left:16px;background:transparent;border:none;color:white;font-weight:bold;font-size:16px;cursor:pointer;">&times;</button>';
-    document.body.appendChild(popup);
-    setTimeout(function(){
-        if(popup) popup.style.display = 'none';
-    }, 5000);
-}
+    // --- INGREDIENT TABLE LOGIC ---
+    let selectedIngredients = [];
 
-// If using fetch for AJAX, wrap it to show popup on error
-const originalFetch = window.fetch;
-window.fetch = function() {
-    return originalFetch.apply(this, arguments).then(function(response) {
-        if (!response.ok) {
-            response.json().then(function(data) {
-                showErrorPopup(data.error || 'An error occurred.');
-            }).catch(function() {
-                showErrorPopup('An error occurred.');
+    function updateIngredientTable() {
+        const tbody = $('#ingredientList');
+        tbody.empty();
+        selectedIngredients.forEach((item, idx) => {
+            const row = $('<tr>');
+            row.append($('<td>').text(item.name));
+            row.append($('<td>').text(item.quantity));
+            const removeBtn = $('<button type="button">Remove</button>').on('click', function() {
+                selectedIngredients.splice(idx, 1);
+                updateIngredientTable();
             });
+            row.append($('<td>').append(removeBtn));
+            tbody.append(row);
+        });
+        // Remove any old hidden inputs
+        $('input[name="ingredients[]"]').remove();
+        $('input[name="quantities[]"]').remove();
+        // Add hidden inputs for form submission
+        selectedIngredients.forEach(item => {
+            $('<input>').attr({type: 'hidden', name: 'ingredients[]', value: item.id}).appendTo('form');
+            $('<input>').attr({type: 'hidden', name: 'quantities[]', value: item.quantity}).appendTo('form');
+        });
+    }
+
+    window.addIngredient = function() {
+        const select = $('#ingredientSelect');
+        const id = select.val();
+        const name = select.find('option:selected').text();
+        const quantity = parseInt($('#ingredientQuantity').val(), 10);
+        if (!id || !quantity || quantity < 1) {
+            showErrorPopup('Please select an ingredient and enter a valid quantity.');
+            return;
+        }
+        // Prevent duplicate ingredient
+        if (selectedIngredients.some(item => item.id === id)) {
+            showErrorPopup('Ingredient already added.');
+            return;
+        }
+        selectedIngredients.push({id, name, quantity});
+        updateIngredientTable();
+        $('#ingredientQuantity').val('');
+    };
+
+    // If the form is reloaded with errors, try to restore selected ingredients from hidden inputs
+    $('input[name="ingredients[]"]').each(function(idx) {
+        const id = $(this).val();
+        const name = $('#ingredientSelect option[value="' + id + '"]').text();
+        const quantity = $('input[name="quantities[]"]').eq(idx).val();
+        if (id && name && quantity) {
+            selectedIngredients.push({id, name, quantity: parseInt(quantity, 10)});
         }
-        return response;
-    }).catch(function(error) {
-        showErrorPopup('A network error occurred.');
-        throw error;
     });
-}
+    updateIngredientTable();
+});
 
diff --git a/frontend/admin_webpage/static/js/error_popup.js b/frontend/admin_webpage/static/js/error_popup.js
deleted file mode 100644
index e12ba07..0000000
--- a/frontend/admin_webpage/static/js/error_popup.js
+++ /dev/null
@@ -1,22 +0,0 @@
-// error_popup.js - Include this in all HTML templates for error popups
-function showErrorPopup(message) {
-    let popup = document.createElement('div');
-    popup.id = 'error-popup';
-    popup.style.position = 'fixed';
-    popup.style.top = '20px';
-    popup.style.left = '50%';
-    popup.style.transform = 'translateX(-50%)';
-    popup.style.background = '#f44336';
-    popup.style.color = 'white';
-    popup.style.padding = '16px';
-    popup.style.borderRadius = '8px';
-    popup.style.zIndex = '10000';
-    popup.style.minWidth = '200px';
-    popup.style.textAlign = 'center';
-    popup.style.boxShadow = '0 2px 8px rgba(0,0,0,0.2)';
-    popup.innerHTML = message + '<button onclick="this.parentElement.style.display=\'none\'" style="margin-left:16px;background:transparent;border:none;color:white;font-weight:bold;font-size:16px;cursor:pointer;">&times;</button>';
-    document.body.appendChild(popup);
-    setTimeout(function(){
-        if(popup) popup.style.display = 'none';
-    }, 5000);
-}
diff --git a/frontend/admin_webpage/static/js/purchase.js b/frontend/admin_webpage/static/js/purchase.js
index b33cde2..f6e3094 100644
--- a/frontend/admin_webpage/static/js/purchase.js
+++ b/frontend/admin_webpage/static/js/purchase.js
@@ -1,3 +1,17 @@
+// Import popup functions for use in this file
+import { showErrorPopup, showSuccessPopup } from './pop_up.js';
+
+function getQueryParam(name) {
+    const url = new URL(window.location.href);
+    return url.searchParams.get(name) || '';
+}
+
+function removeQueryParam(name) {
+    const url = new URL(window.location.href);
+    url.searchParams.delete(name);
+    window.history.replaceState({}, document.title, url.pathname + url.search);
+}
+
 document.addEventListener('DOMContentLoaded', function () {
     const salesConfig = document.getElementById('salesConfig');
     if (salesConfig) {
@@ -18,43 +32,31 @@ document.addEventListener('DOMContentLoaded', function() {
     }
 });
 
-// Global AJAX error handler for popups
-function showErrorPopup(message) {
-    let popup = document.createElement('div');
-    popup.id = 'ajax-error-popup';
-    popup.style.position = 'fixed';
-    popup.style.top = '20px';
-    popup.style.left = '50%';
-    popup.style.transform = 'translateX(-50%)';
-    popup.style.background = '#f44336';
-    popup.style.color = 'white';
-    popup.style.padding = '16px';
-    popup.style.borderRadius = '8px';
-    popup.style.zIndex = '10000';
-    popup.style.minWidth = '200px';
-    popup.style.textAlign = 'center';
-    popup.style.boxShadow = '0 2px 8px rgba(0,0,0,0.2)';
-    popup.innerHTML = message + '<button onclick="this.parentElement.style.display=\'none\'" style="margin-left:16px;background:transparent;border:none;color:white;font-weight:bold;font-size:16px;cursor:pointer;">&times;</button>';
-    document.body.appendChild(popup);
-    setTimeout(function(){
-        if(popup) popup.style.display = 'none';
-    }, 5000);
-}
+$(document).ready(function() {
+    if (window._errorMsg) showErrorPopup(window._errorMsg);
+    if (window._successMsg) showSuccessPopup(window._successMsg);
+
+    const urlSuccess = getQueryParam('success');
+    if (urlSuccess) {
+        showSuccessPopup(urlSuccess);
+        removeQueryParam('success');
+    }
 
-// If using fetch for AJAX, wrap it to show popup on error
-const originalFetch = window.fetch;
-window.fetch = function() {
-    return originalFetch.apply(this, arguments).then(function(response) {
-        if (!response.ok) {
-            response.json().then(function(data) {
-                showErrorPopup(data.error || 'An error occurred.');
-            }).catch(function() {
-                showErrorPopup('An error occurred.');
-            });
-        }
-        return response;
-    }).catch(function(error) {
-        showErrorPopup('A network error occurred.');
-        throw error;
-    });
-};
\ No newline at end of file
+    // Example: If you have a submit handler, use this pattern
+    function handleFormSubmit(event) {
+        event.preventDefault();
+        // ...collect form data as needed...
+        $.post('/purchase', $(event.target).serialize(), function(response) {
+            if (response.includes('window._errorMsg') || response.includes('window._successMsg')) {
+                document.open();
+                document.write(response);
+                document.close();
+            } else {
+                showSuccessPopup('Purchase completed successfully!');
+            }
+        }).fail(function() {
+            showErrorPopup('Error submitting purchase.');
+        });
+    }
+    // ...attach handleFormSubmit to your form if not already...
+});
\ No newline at end of file
diff --git a/frontend/admin_webpage/static/js/toast_round.js b/frontend/admin_webpage/static/js/toast_round.js
index 3015cc4..76116ce 100644
--- a/frontend/admin_webpage/static/js/toast_round.js
+++ b/frontend/admin_webpage/static/js/toast_round.js
@@ -1,116 +1,179 @@
+import { showErrorPopup, showSuccessPopup } from './pop_up.js';
+
+function getQueryParam(name) {
+    const url = new URL(window.location.href);
+    return url.searchParams.get(name) || '';
+}
+
+function removeQueryParam(name) {
+    const url = new URL(window.location.href);
+    url.searchParams.delete(name);
+    window.history.replaceState({}, document.title, url.pathname + url.search);
+}
+
 $(document).ready(function() {
-    // Assuming `users` is passed as a global JavaScript variable
+    // Assuming `users` and `products` are passed as global JavaScript variables
     const users = window.users || [];
+    const products = window.products || [];
 
-    // Debugging: Log the users array to verify its content
-    console.log("Users array:", users);
+    // Helper to get toaster_space for a product_id
+    function getToasterSpace(productId) {
+        const prod = products.find(p => p.product_id == productId);
+        return prod ? (prod.toaster_space || 1) : 1;
+    }
 
-    // Function to generate squares based on selected product
-    function configureSquaresForProduct(productId, quantity) {
-        // Clear existing squares
+    // Render 6 rows, each with a user and product dropdown
+    function renderRows(selectedProducts) {
         $('#squaresContainer').empty();
-
-        // Generate squares
-        for (let i = 0; i < quantity; i++) {
-            const square = $(
-                `<div>
-                    <label for="userSelect${i}">Select User for Toast ${i + 1}:</label>
-                    <select id="userSelect${i}" name="userSelect${i}">
+        for (let i = 0; i < 6; i++) {
+            const selectedProductId = selectedProducts[i] || '';
+            const isDisabled = false; // We'll update this after rendering
+            const row = $(`
+                <div class="user-product-row" style="margin-bottom:8px;display:flex;align-items:center;gap:8px;">
+                    <label>User:</label>
+                    <select class="userSelect" id="userSelect${i}" name="userSelect${i}" ${isDisabled ? 'disabled' : ''}>
                         ${users.map(user => `<option value="${user.user_id}">${user.name}</option>`).join('')}
                     </select>
-                </div>`
-            );
-            $('#squaresContainer').append(square);
-
-            // Debugging: Log the generated square
-            console.log("Generated square for user selection:", square.html());
+                    <label>Product:</label>
+                    <select class="productSelect" id="productSelect${i}" name="productSelect${i}" data-row="${i}" ${isDisabled ? 'disabled' : ''}>
+                        <option value="">-- Select --</option>
+                        ${products.map(product => `<option value="${product.product_id}" data-toaster_space="${product.toaster_space}">${product.name}</option>`).join('')}
+                    </select>
+                    <span class="occupied-label" style="color:#f44336;display:none;">Occupied</span>
+                </div>
+            `);
+            // Set selected value if any
+            row.find('.productSelect').val(selectedProductId);
+            $('#squaresContainer').append(row);
         }
+        updateOccupiedStates();
     }
 
-    // On page load, configure squares for the first toast product if available
-    const firstProductOption = $('#toastProduct option:first');
-    if (firstProductOption.length > 0) {
-        const firstProductId = firstProductOption.val();
-        const firstProductQuantity = firstProductOption.data('quantity');
-        configureSquaresForProduct(firstProductId, firstProductQuantity);
+    // Update disabled/enabled state based on current product selections
+    function updateOccupiedStates() {
+        let occupiedUntil = -1;
+        $('.user-product-row').each(function(idx) {
+            const $row = $(this);
+            const $productSelect = $row.find('.productSelect');
+            const $userSelect = $row.find('.userSelect');
+            const $occupiedLabel = $row.find('.occupied-label');
+            if (idx <= occupiedUntil) {
+                $productSelect.prop('disabled', true);
+                $userSelect.prop('disabled', true);
+                $occupiedLabel.show();
+            } else {
+                $productSelect.prop('disabled', false);
+                $userSelect.prop('disabled', false);
+                $occupiedLabel.hide();
+                const selectedProductId = $productSelect.val();
+                if (selectedProductId) {
+                    const toasterSpace = getToasterSpace(selectedProductId);
+                    if (toasterSpace > 1) {
+                        occupiedUntil = idx + toasterSpace - 1;
+                    }
+                }
+            }
+        });
     }
 
-    // Handle product change event
-    $('#toastProduct').change(function() {
-        const selectedOption = $(this).find(':selected');
-        const productId = selectedOption.val();
-        const quantity = selectedOption.data('quantity');
+    // --- GLOBAL SELECT LOGIC ---
+    // Add global selectors above the 6 entry rows
+    const globalUserSelect = $('<select id="globalUserSelect"><option value="">-- Select User for All --</option></select>');
+    const globalProductSelect = $('<select id="globalProductSelect"><option value="">-- Select Product for All --</option></select>');
+    // Populate global selects from window.products and window.users
+    if (window.products) {
+        window.products.forEach(p => {
+            globalProductSelect.append(`<option value="${p.product_id}">${p.name}</option>`);
+        });
+    }
+    if (window.users) {
+        window.users.forEach(u => {
+            globalUserSelect.append(`<option value="${u.user_id}">${u.name}</option>`);
+        });
+    }
+    // Insert above the 6 entry rows (assume a container with id 'entriesContainer')
+    $('#entriesContainer').prepend('<div id="globalSelectors"></div>');
+    $('#globalSelectors').append(globalUserSelect).append(globalProductSelect);
 
-        // Debugging: Log the selected product and quantity
-        console.log("Selected product:", productId);
-        console.log("Toast round quantity:", quantity);
+    // On change, set all 6 selects to the chosen value and trigger the occupy logic
+    globalProductSelect.on('change', function() {
+        const val = $(this).val();
+        if (!val) return;
+        $('.productSelect').val(val).trigger('change');
+    });
+    globalUserSelect.on('change', function() {
+        const val = $(this).val();
+        if (!val) return;
+        $('.userSelect').val(val).trigger('change');
+    });
 
-        configureSquaresForProduct(productId, quantity);
+    // Initial render
+    renderRows([]);
+
+    // On product change, update occupied states and show error if not enough space
+    $('#squaresContainer').on('change', '.productSelect', function() {
+        updateOccupiedStates();
+        // Check if the selected product fits in the remaining slots
+        const idx = $(this).closest('.user-product-row').index();
+        const selectedProductId = $(this).val();
+        if (selectedProductId) {
+            const toasterSpace = getToasterSpace(selectedProductId);
+            if (toasterSpace > 1 && idx + toasterSpace > 6) {
+                showErrorPopup('Not enough space for this product in the remaining slots.');
+                // Optionally, reset the selection
+                $(this).val('');
+                updateOccupiedStates();
+            }
+        }
     });
 
     // Submit button click handler
     $('#submitButton').click(function() {
-        const selectedProduct = $('#toastProduct').val();
         const userSelections = [];
-
-        // Collect user selections
-        $('#squaresContainer select').each(function() {
-            userSelections.push($(this).val());
+        const productSelections = [];
+        $('.user-product-row').each(function(idx) {
+            const $row = $(this);
+            const $userSelect = $row.find('.userSelect');
+            const $productSelect = $row.find('.productSelect');
+            if (!$productSelect.prop('disabled') && $productSelect.val()) {
+                userSelections.push($userSelect.val());
+                productSelections.push($productSelect.val());
+            }
         });
-
-        // Debugging: Log the collected user selections
-        console.log("User selections:", userSelections);
-
         // Send data to backend
         $.post('/toast_round', {
-            product_id: selectedProduct,
+            product_ids: productSelections,
             user_selections: userSelections
         }, function(response) {
-            // Refresh the page after successful submission
-            location.reload();
+            // Create a temporary DOM to extract the message
+            const tempDiv = document.createElement('div');
+            tempDiv.innerHTML = response;
+            const errorMatch = tempDiv.innerHTML.match(/window\._errorMsg\s*=\s*"([^"]*)"/);
+            const successMatch = tempDiv.innerHTML.match(/window\._successMsg\s*=\s*"([^"]*)"/);
+            const errorMsg = errorMatch && errorMatch[1] ? errorMatch[1] : '';
+            const successMsg = successMatch && successMatch[1] ? successMatch[1] : '';
+            if (errorMsg) {
+                showErrorPopup(errorMsg);
+            } else if (successMsg) {
+                showSuccessPopup(successMsg);
+            } else {
+                // No backend message, reload the page with a frontend-defined success message
+                const msg = encodeURIComponent('Toast round submitted successfully!');
+                window.location.search = '?success=' + msg;
+            }
         }).fail(function() {
-            alert('Error submitting data.');
+            showErrorPopup('Error submitting data.');
         });
     });
-});
 
-// Global AJAX error handler for popups
-function showErrorPopup(message) {
-    let popup = document.createElement('div');
-    popup.id = 'ajax-error-popup';
-    popup.style.position = 'fixed';
-    popup.style.top = '20px';
-    popup.style.left = '50%';
-    popup.style.transform = 'translateX(-50%)';
-    popup.style.background = '#f44336';
-    popup.style.color = 'white';
-    popup.style.padding = '16px';
-    popup.style.borderRadius = '8px';
-    popup.style.zIndex = '10000';
-    popup.style.minWidth = '200px';
-    popup.style.textAlign = 'center';
-    popup.style.boxShadow = '0 2px 8px rgba(0,0,0,0.2)';
-    popup.innerHTML = message + '<button onclick="this.parentElement.style.display=\'none\'" style="margin-left:16px;background:transparent;border:none;color:white;font-weight:bold;font-size:16px;cursor:pointer;">&times;</button>';
-    document.body.appendChild(popup);
-    setTimeout(function(){
-        if(popup) popup.style.display = 'none';
-    }, 5000);
-}
+    // Show popups if error or success messages are present
+    if (window._errorMsg) showErrorPopup(window._errorMsg);
+    if (window._successMsg) showSuccessPopup(window._successMsg);
 
-// If using fetch for AJAX, wrap it to show popup on error
-const originalFetch = window.fetch;
-window.fetch = function() {
-    return originalFetch.apply(this, arguments).then(function(response) {
-        if (!response.ok) {
-            response.json().then(function(data) {
-                showErrorPopup(data.error || 'An error occurred.');
-            }).catch(function() {
-                showErrorPopup('An error occurred.');
-            });
-        }
-        return response;
-    }).catch(function(error) {
-        showErrorPopup('A network error occurred.');
-        throw error;
-    });
-};
\ No newline at end of file
+    // Show popup if success param is present in URL
+    const urlSuccess = getQueryParam('success');
+    if (urlSuccess) {
+        showSuccessPopup(urlSuccess);
+        removeQueryParam('success');
+    }
+});
diff --git a/frontend/admin_webpage/templates/add_ingredient.html b/frontend/admin_webpage/templates/add_ingredient.html
index 2502247..2b444e7 100644
--- a/frontend/admin_webpage/templates/add_ingredient.html
+++ b/frontend/admin_webpage/templates/add_ingredient.html
@@ -4,7 +4,6 @@
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
     <title>Add Ingredient</title>
 </head>
 <body>
@@ -14,9 +13,12 @@
         <label for="name">Ingredient Name:</label>
         <input type="text" name="name" required><br>
 
-        <label for="price">Price per Unit:</label>
+        <label for="price">Price per Package:</label>
         <input type="number" name="price" step="0.01" required><br>
 
+        <label for="number_ingredients">Ingredients in Package:</label>
+        <input type="number" name="number_ingredients" step="1" required><br>
+        
         <label for="stock">Stock:</label>
         <input type="number" name="stock" step="1" min="0">
 
@@ -24,14 +26,15 @@
     </form>
 
     {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
+    <script>window._errorMsg = "{{ error_message|escapejs }}";</script>
     {% endif %}
     {% if success_message %}
-    <script>
-        showErrorPopup("{{ success_message|escapejs }}");
-    </script>
+    <script>window._successMsg = "{{ success_message|escapejs }}";</script>
     {% endif %}
+    <script type="module">
+        import { showErrorPopup, showSuccessPopup } from "{{ url_for('static', filename='js/pop_up.js') }}";
+        if (window._errorMsg) showErrorPopup(window._errorMsg);
+        if (window._successMsg) showSuccessPopup(window._successMsg);
+    </script>
 </body>
 </html>
diff --git a/frontend/admin_webpage/templates/add_product.html b/frontend/admin_webpage/templates/add_product.html
index 0d1099c..50c0049 100644
--- a/frontend/admin_webpage/templates/add_product.html
+++ b/frontend/admin_webpage/templates/add_product.html
@@ -5,8 +5,8 @@
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
     <title>Add Product</title>
-    <script src="/static/js/add_product.js" defer></script> <!-- Link to the external JavaScript file -->
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
+    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
+    <script type="module" src="{{ url_for('static', filename='js/add_product.js') }}"></script>
 </head>
 <body>
     <a href="/">Main Page</a>
@@ -16,15 +16,15 @@
         <input type="text" name="name" required><br>
 
         <label for="category">Category:</label>
-        <select name="category" id="categorySelect" required onchange="toggleAdditionalInput()">
+        <select name="category" id="categorySelect" required>
             <option value="raw">Raw</option>
             <option value="toast">Toast</option>
         </select><br>
 
         <!-- Additional input field, hidden by default -->
-        <div id="toastRoundQuantitySelect" style="display: none;">
-            <label for="toastRoundQuantity">Toast Runden Anzahl:</label>
-            <input type="number" id="toastRoundQuantity" name="toast_round_quantity" step="1" min="1"><br>
+        <div id="toasterSpaceQuantitySelect" style="display: none;">
+            <label for="toaster_space">Toaster Platz:</label>
+            <input type="number" id="toaster_space" name="toaster_space" step="1" min="1"><br>
         </div>
 
         <label for="price">Price per Unit:</label>
@@ -59,14 +59,15 @@
     </form>
 
     {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
+    <script>window._errorMsg = "{{ error_message|escapejs }}";</script>
     {% endif %}
     {% if success_message %}
-    <script>
-        showErrorPopup("{{ success_message|escapejs }}");
-    </script>
+    <script>window._successMsg = "{{ success_message|escapejs }}";</script>
     {% endif %}
+    <script type="module">
+        import { showErrorPopup, showSuccessPopup } from "{{ url_for('static', filename='js/pop_up.js') }}";
+        if (window._errorMsg) showErrorPopup(window._errorMsg);
+        if (window._successMsg) showSuccessPopup(window._successMsg);
+    </script>
 </body>
 </html>
diff --git a/frontend/admin_webpage/templates/admin_dashboard.html b/frontend/admin_webpage/templates/admin_dashboard.html
index 0dfbbb8..5c15164 100644
--- a/frontend/admin_webpage/templates/admin_dashboard.html
+++ b/frontend/admin_webpage/templates/admin_dashboard.html
@@ -5,34 +5,19 @@
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Admin Dashboard</title>
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
 </head>
 <body>
-    <!-- Error Popup Block for flashed messages -->
-    {% with messages = get_flashed_messages() %}
-      {% if messages %}
-        <div id="error-popup" style="position:fixed;top:20px;left:50%;transform:translateX(-50%);background:#f44336;color:white;padding:16px;border-radius:8px;z-index:1000;min-width:200px;text-align:center;box-shadow:0 2px 8px rgba(0,0,0,0.2);">
-            {{ messages[0] }}
-            <button onclick="document.getElementById('error-popup').style.display='none'" style="margin-left:16px;background:transparent;border:none;color:white;font-weight:bold;font-size:16px;cursor:pointer;">&times;</button>
-        </div>
-        <script>
-            setTimeout(function(){
-                var popup = document.getElementById('error-popup');
-                if(popup) popup.style.display = 'none';
-            }, 5000);
-        </script>
-      {% endif %}
-    {% endwith %}
     {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
+    <script>window._errorMsg = "{{ error_message|escapejs }}";</script>
     {% endif %}
     {% if success_message %}
-    <script>
-        showErrorPopup("{{ success_message|escapejs }}");
-    </script>
+    <script>window._successMsg = "{{ success_message|escapejs }}";</script>
     {% endif %}
+    <script type="module">
+        import { showErrorPopup, showSuccessPopup } from "{{ url_for('static', filename='js/pop_up.js') }}";
+        if (window._errorMsg) showErrorPopup(window._errorMsg);
+        if (window._successMsg) showSuccessPopup(window._successMsg);
+    </script>
     <a href="/">Main Page</a>
     <h1>Welcome to the Admin Dashboard</h1>
     <ul>
diff --git a/frontend/admin_webpage/templates/bank.html b/frontend/admin_webpage/templates/bank.html
index 4fed2c2..62917b7 100644
--- a/frontend/admin_webpage/templates/bank.html
+++ b/frontend/admin_webpage/templates/bank.html
@@ -5,7 +5,7 @@
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Bank Entry</title>
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
+    <script type="module" src="{{ url_for('static', filename='js/pop_up.js') }}"></script>
 </head>
 <body>
     <a href="/">Main Page</a>
@@ -16,7 +16,8 @@
                 <th>Total Balance</th>
                 <th>Available Balance</th>
                 <th>Ingredient Value</th>
-                <th>Product Value</th>
+                <th>Restocking Cost</th>
+                <th>Profit Balance</th>
             </tr>
         </thead>
         <tbody>
@@ -24,19 +25,49 @@
                 <td>{{ bank_entry.total_balance }}</td>
                 <td>{{ bank_entry.available_balance }}</td>
                 <td>{{ bank_entry.ingredient_value }}</td>
-                <td>{{ bank_entry.product_value }}</td>
+                <td>{{ bank_entry.restocking_cost }}</td>
+                <td>{{ bank_entry.profit_balance }}</td>
             </tr>
         </tbody>
     </table>
+    <h2>Withdraw Money</h2>
+    <form method="POST" action="/bank/withdraw">
+        <label for="withdraw_amount">Amount:</label>
+        <input type="number" id="withdraw_amount" name="amount" step="0.01" min="0.01" required>
+        <input type="text" id="withdraw_description" name="description" placeholder="Description (optional)">
+        <button type="submit">Withdraw</button>
+    </form>
+    <h2>Bank Transactions</h2>
+    <table border="1" style="margin-top:1em; width:100%;">
+        <thead>
+            <tr>
+                <th>Type</th>
+                <th>Amount</th>
+                <th>Description</th>
+                <th>Date</th>
+            </tr>
+        </thead>
+        <tbody>
+            {% for tx in transactions %}
+            <tr>
+                <td>{{ tx.type }}</td>
+                <td>{{ tx.amount }}</td>
+                <td>{{ tx.description }}</td>
+                <td>{{ tx.date }}</td>
+            </tr>
+            {% endfor %}
+        </tbody>
+    </table>
     {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
+    <script>window._errorMsg = "{{ error_message|escapejs }}";</script>
     {% endif %}
     {% if success_message %}
-    <script>
-        showErrorPopup("{{ success_message|escapejs }}");
-    </script>
+    <script>window._successMsg = "{{ success_message|escapejs }}";</script>
     {% endif %}
+    <script type="module">
+        import { showErrorPopup, showSuccessPopup } from "{{ url_for('static', filename='js/pop_up.js') }}";
+        if (window._errorMsg) showErrorPopup(window._errorMsg);
+        if (window._successMsg) showSuccessPopup(window._successMsg);
+    </script>
 </body>
 </html>
\ No newline at end of file
diff --git a/frontend/admin_webpage/templates/ingredients.html b/frontend/admin_webpage/templates/ingredients.html
index be33640..f4dda29 100644
--- a/frontend/admin_webpage/templates/ingredients.html
+++ b/frontend/admin_webpage/templates/ingredients.html
@@ -5,7 +5,6 @@
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Manage Ingredients</title>
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
 </head>
 <body>
     <a href="/">Main Page</a>
@@ -15,7 +14,9 @@
         <thead>
             <tr>
                 <th>Name</th>
-                <th>Price</th>
+                <th>Price per package</th>
+                <th>Ingredients in package</th>
+                <th>Price per unit</th>
                 <th>Stock</th>
                 <th>Restock</th>
             </tr>
@@ -24,6 +25,8 @@
             {% for ingredient in ingredients %}
                 <tr>
                     <td>{{ ingredient.name }}</td>
+                    <td>{{ ingredient.price_per_package }}</td>
+                    <td>{{ ingredient.number_of_units }}</td>
                     <td>{{ ingredient.price_per_unit }}</td>
                     <td>{{ ingredient.stock_quantity }}</td>
                     <td>
@@ -38,14 +41,15 @@
         </tbody>
     </table>
     {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
+    <script>window._errorMsg = "{{ error_message|escapejs }}";</script>
     {% endif %}
     {% if success_message %}
-    <script>
-        showErrorPopup("{{ success_message|escapejs }}");
-    </script>
+    <script>window._successMsg = "{{ success_message|escapejs }}";</script>
     {% endif %}
+    <script type="module">
+        import { showErrorPopup, showSuccessPopup } from "{{ url_for('static', filename='js/pop_up.js') }}";
+        if (window._errorMsg) showErrorPopup(window._errorMsg);
+        if (window._successMsg) showSuccessPopup(window._successMsg);
+    </script>
 </body>
 </html>
diff --git a/frontend/admin_webpage/templates/products.html b/frontend/admin_webpage/templates/products.html
index cd6a94a..284fcbd 100644
--- a/frontend/admin_webpage/templates/products.html
+++ b/frontend/admin_webpage/templates/products.html
@@ -5,7 +5,6 @@
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Manage Products</title>
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
 </head>
 <body>
     <a href="/">Main Page</a>
@@ -17,7 +16,11 @@
                 <th>Name</th>
                 <th>Category</th>
                 <th>Price</th>
+                <th>Cost</th>
+                <th>Profit</th>
                 <th>Stock</th>
+                <th>Toaster Space</th>
+
             </tr>
         </thead>
         <tbody>
@@ -26,21 +29,25 @@
                     <td>{{ product.name }}</td>
                     <td>{{ product.category }}</td>
                     <td>{{ product.price_per_unit }}</td>
+                    <td>{{ product.cost_per_unit }}</td>
+                    <td>{{ product.profit_per_unit }}</td>
                     <td>{{ product.stock_quantity }}</td>
+                    <td>{{ product.toaster_space }}</td>
                 </tr>
             {% endfor %}
         </tbody>
         
     </table>
     {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
+    <script>window._errorMsg = "{{ error_message|escapejs }}";</script>
     {% endif %}
     {% if success_message %}
-    <script>
-        showErrorPopup("{{ success_message|escapejs }}");
-    </script>
+    <script>window._successMsg = "{{ success_message|escapejs }}";</script>
     {% endif %}
+    <script type="module">
+        import { showErrorPopup, showSuccessPopup } from "{{ url_for('static', filename='js/pop_up.js') }}";
+        if (window._errorMsg) showErrorPopup(window._errorMsg);
+        if (window._successMsg) showSuccessPopup(window._successMsg);
+    </script>
 </body>
 </html>
diff --git a/frontend/admin_webpage/templates/purchase.html b/frontend/admin_webpage/templates/purchase.html
index be3c765..277b985 100644
--- a/frontend/admin_webpage/templates/purchase.html
+++ b/frontend/admin_webpage/templates/purchase.html
@@ -4,7 +4,7 @@
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <script src="/static/js/purchase.js"></script>
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
+    <script type="module" src="{{ url_for('static', filename='js/pop_up.js') }}"></script>
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
     <title>Purchase</title>
 </head>
@@ -70,14 +70,15 @@
     </select>
 
     {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
+    <script>window._errorMsg = "{{ error_message|escapejs }}";</script>
     {% endif %}
     {% if success_message %}
-    <script>
-        showErrorPopup("{{ success_message|escapejs }}");
-    </script>
+    <script>window._successMsg = "{{ success_message|escapejs }}";</script>
     {% endif %}
+    <script type="module">
+        import { showErrorPopup, showSuccessPopup } from "{{ url_for('static', filename='js/pop_up.js') }}";
+        if (window._errorMsg) showErrorPopup(window._errorMsg);
+        if (window._successMsg) showSuccessPopup(window._successMsg);
+    </script>
 </body>
 </html>
diff --git a/frontend/admin_webpage/templates/toast_round.html b/frontend/admin_webpage/templates/toast_round.html
index d79b6c7..fb0c5e1 100644
--- a/frontend/admin_webpage/templates/toast_round.html
+++ b/frontend/admin_webpage/templates/toast_round.html
@@ -6,26 +6,21 @@
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
     <title>Toast Round</title>
     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
-    <script src="/static/js/toast_round.js"></script>
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
+    <script type="module" src="{{ url_for('static', filename='js/toast_round.js') }}"></script>
     <script>
-        window.users = JSON.parse('{{ users_json | safe }}');
+        window.products = JSON.parse('{{ products_json | escapejs | safe if products_json is defined else "[]" }}');
+        window.users = JSON.parse('{{ users_json | escapejs | safe if users_json is defined else "[]" }}');
     </script>
 </head>
 <body>
     <a href="/">Main Page</a>
     <h1>Toast Round</h1>
 
-    <!-- Dropdown for selecting toast products -->
-    <label for="toastProduct">Select a Toast Product:</label>
-    <select id="toastProduct">
-        {% for product in toast_products %}
-        <option value="{{ product.product_id }}" data-quantity="{{ product.toast_round_quantity }}">{{ product.name }}</option>
-        {% endfor %}
-    </select>
-
-    <!-- Container for dynamically generated squares -->
-    <div id="squaresContainer"></div>
+    <!-- Container for dynamically generated user/product rows -->
+    <div id="entriesContainer">
+        <div id="globalSelectors"></div>
+        <div id="squaresContainer"></div>
+    </div>
 
     <!-- Submit button -->
     <button id="submitButton">Submit</button>
@@ -35,35 +30,27 @@
     <table border="1">
         <thead>
             <tr>
-                <th>Product Name</th>
+                <th>Toast-Consumer</th>
                 <th>Time</th>
-                <th>Users</th>
             </tr>
         </thead>
         <tbody>
             {% for toast_round in toast_rounds %}
             <tr>
-                <td>{{ toast_round.sales[0].product.name }}</td>
-                <td>{{ toast_round.date_time }}</td>
                 <td>
                     {% for sale in toast_round.sales %}
-                        {{ sale.user.name }}{% if not loop.last %}, {% endif %}
+                        [{{ sale.user.name }}: {{ sale.product.name }}{% if not loop.last %}, {% endif %}]
                     {% endfor %}
                 </td>
+                <td>{{ toast_round.date_time }}</td>
             </tr>
             {% endfor %}
         </tbody>
     </table>
-    
-    {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
-    {% endif %}
-    {% if success_message %}
+
     <script>
-        showErrorPopup("{{ success_message|escapejs }}");
+        window._errorMsg = "{{ error_message|escapejs if error_message else '' }}";
+        window._successMsg = "{{ success_message|escapejs if success_message else '' }}";
     </script>
-    {% endif %}
 </body>
 </html>
\ No newline at end of file
diff --git a/frontend/admin_webpage/templates/users.html b/frontend/admin_webpage/templates/users.html
index d792aab..81be2a5 100644
--- a/frontend/admin_webpage/templates/users.html
+++ b/frontend/admin_webpage/templates/users.html
@@ -5,7 +5,8 @@
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Manage Users</title>
     <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
-    <script src="{{ url_for('static', filename='js/error_popup.js') }}"></script>
+    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
+    <script type="module" src="{{ url_for('static', filename='js/pop_up.js') }}"></script>
 </head>
 <body>
     <a href="/">Main Page</a>
@@ -16,6 +17,8 @@
                 <th>Name</th>
                 <th>Balance</th>
                 <th>Role</th>
+                <th>Deposit</th>
+                <th>Withdraw</th>
             </tr>
         </thead>
         <tbody>
@@ -24,6 +27,20 @@
                     <td>{{ user.name }}</td>
                     <td>{{ user.balance }}</td>
                     <td>{{ user.role }}</td>
+                    <td>
+                        <form method="POST" action="/users/deposit" style="display:inline-flex; gap:4px; align-items:center;">
+                            <input type="hidden" name="user_id" value="{{ user.user_id }}">
+                            <input type="number" name="amount" step="0.1" min="0.1" required style="width:70px;">
+                            <button type="submit">Deposit</button>
+                        </form>
+                    </td>
+                    <td>
+                        <form method="POST" action="/users/withdraw" style="display:inline-flex; gap:4px; align-items:center;">
+                            <input type="hidden" name="user_id" value="{{ user.user_id }}">
+                            <input type="number" name="amount" step="0.1" min="0.1" required style="width:70px;">
+                            <button type="submit">Withdraw</button>
+                        </form>
+                    </td>
                 </tr>
             {% endfor %}
             <tr>
@@ -46,15 +63,54 @@
             </tr>
         </tbody>
     </table>
+    <!-- Transaction Filter Controls -->
+    <div style="margin-top:2em;">
+        <label for="transactionUserSelect">User:</label>
+        <select id="transactionUserSelect">
+            <option value="all">All</option>
+            {% for user in users %}
+                <option value="{{ user.user_id }}">{{ user.name }}</option>
+            {% endfor %}
+        </select>
+        <label for="transactionTypeSelect">Type:</label>
+        <select id="transactionTypeSelect">
+            <option value="all">All</option>
+            <option value="deposit">Deposit</option>
+            <option value="withdraw">Withdraw</option>
+        </select>
+    </div>
+    <!-- Transaction Table -->
+    <table id="transactionTable" style="margin-top:1em; width:100%;">
+        <thead>
+            <tr>
+                <th>User</th>
+                <th>Type</th>
+                <th>Amount</th>
+                <th>Date</th>
+            </tr>
+        </thead>
+        <tbody id="transactionTableBody">
+            {% for tx in transactions %}
+            <tr>
+                <td>{{ tx.user_name }}</td>
+                <td>{{ tx.type }}</td>
+                <td>{{ tx.amount }}</td>
+                <td>{{ tx.date }}</td>
+            </tr>
+            {% endfor %}
+        </tbody>
+    </table>
+    <script type="module" src="{{ url_for('static', filename='js/transactions.js') }}"></script>
     {% if error_message %}
-    <script>
-        showErrorPopup("{{ error_message|escapejs }}");
-    </script>
+    <script>window._errorMsg = "{{ error_message|escapejs }}";</script>
     {% endif %}
     {% if success_message %}
-    <script>
-        showErrorPopup("{{ success_message|escapejs }}");
-    </script>
+    <script>window._successMsg = "{{ success_message|escapejs }}";</script>
     {% endif %}
+    <script type="module">
+        import { showErrorPopup, showSuccessPopup } from "{{ url_for('static', filename='js/pop_up.js') }}";
+        if (window._errorMsg) showErrorPopup(window._errorMsg);
+        if (window._successMsg) showSuccessPopup(window._successMsg);
+    </script>
 </body>
 </html>
